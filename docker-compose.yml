version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: endurain_postgres
    environment:
      POSTGRES_DB: endurain
      POSTGRES_USER: endurain
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U endurain"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: endurain_backend
    environment:
      # Base de datos
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: endurain
      DB_USER: endurain
      DB_PASSWORD: ${DB_PASSWORD:-changeme123}
      
      # Seguridad (CAMBIAR EN PRODUCCIÓN)
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      FERNET_KEY: ${FERNET_KEY:-your-fernet-key-32-chars-long-change}
      
      # Configuración de la aplicación
      ENDURAIN_HOST: ${ENDURAIN_HOST:-http://localhost:8080}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      TZ: ${TZ:-UTC}
      
      # Directorios
      BACKEND_DIR: /app
      DATA_DIR: /app/data
      LOGS_DIR: /app/logs
      FILES_DIR: /app/data/activity_files
      ACTIVITY_MEDIA_DIR: /app/data/activity_media
      
      # Email (opcional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
      
      # Geocoding
      REVERSE_GEO_PROVIDER: ${REVERSE_GEO_PROVIDER:-nominatim}
      REVERSE_GEO_RATE_LIMIT: ${REVERSE_GEO_RATE_LIMIT:-1}
      
      # Tracing (opcional)
      JAEGER_ENABLED: ${JAEGER_ENABLED:-false}
      JAEGER_HOST: ${JAEGER_HOST:-jaeger}
      JAEGER_PORT: ${JAEGER_PORT:-4317}
      JAEGER_PROTOCOL: ${JAEGER_PROTOCOL:-http}
    
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    
    ports:
      - "8000:8000"
    
    depends_on:
      postgres:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_data:
    driver: local
  backend_logs:
    driver: local